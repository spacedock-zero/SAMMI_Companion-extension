[extension_name]
SAMMI Companion
[extension_info]
A nice companion for SAMMI
[extension_version]
{{ version }}
[insert_external]
<div>
{{ html }}
</div>
[insert_command]

/* Request */
SAMMI.extCommand('Companion: TTS Request', 3355443, 52, {
	text: ['Text', 14, 'Hello!'],
});
SAMMI.extCommand('Companion: TTS Request (Consistent)', 3355443, 52, {
	text: ['Text', 14, 'Hello!'],
	key: ['Username', 15, 'username_variable']
});
/* Control */
SAMMI.extCommand('Companion: TTS Skip', 3355443, 52, {
	text: ['Will Skip to next TTS in queue', 30, 'Skip!']
});
SAMMI.extCommand('Companion: TTS Queue Pause', 3355443, 52, {
	text: ['Will Pause the Queue', 30, 'Pause Queue']
});
SAMMI.extCommand('Companion: TTS Queue Continue', 3355443, 52, {
	text: ['Will Resume the Queue', 30, 'Resume Queue']
});
/* Param */
SAMMI.extCommand('Companion: TTS Rate', 3355443, 52, {
	text: ['Rate', 11, 1]
});
SAMMI.extCommand('Companion: TTS Volume', 3355443, 52, {
	text: ['Volume', 11, 0.7]
});


companion_main();
[insert_hook]
//Deprecated
[insert_script]
function companion_handleSongRecoPacket(data){
	switch (data.type) {
		case 'songreco_lyric':
			SAMMI.setVariable('songreco_lyric', data.body, 'companion-songreco')
		break;
		case 'songreco_lyrics':
			SAMMI.setVariable('songreco_lyrics', data.body, 'companion-songreco')
		break;
		case 'songreco_details':
			SAMMI.setVariable('songreco_track', data.body, 'companion-songreco')
		break;
		default:
			console.error("Unknown songreco packet", data)
			break;
	}
	SAMMI.triggerExt(`companion-songreco`)
}
function companion_reconnect(){
	const companionConnectButton = document.getElementById('companion-websocket-connect')
	const companionConnectStatus = document.getElementById('companion-websocket-status')

	if(!companionConnectButton || !companionConnectStatus){
		SAMMI.alert("SAMMI Companion [Extension] Error")
		return
	}
	const saved_companion_port = localStorage.getItem('companion_port') ?? '19135'
	const saved_companion_host = localStorage.getItem('companion_host') ?? 'localhost'
	try{
	let ws = new WebSocket(`ws://${saved_companion_host}:${saved_companion_port}`)
	ws.addEventListener('open', ()=>{
		console.info('Companion WS Open')
		companionConnectButton.innerText = `Disconnect`
		companionConnectStatus.innerText = `Connected`
	})
	ws.addEventListener('close', ()=>{
		console.info('Companion WS Closed')
		companionConnectButton.innerText = `Connect`
		companionConnectStatus.innerText = `Waiting`
	})
	ws.addEventListener("message",(evt)=>{
		if(typeof evt.data != "string") return
		try {
			const parsed = JSON.parse(evt.data);
			if(!parsed) return;
			if(parsed.type.includes("songreco_")){
				companion_handleSongRecoPacket(parsed)
				return
			}
			SAMMI.triggerExt(`companion-${parsed.type}`, parsed)
		} catch (error) {
			console.warn("Error Receiving Message", error)
		}
	})
	return ws;
	}catch(err){
		return companion_reconnect()
	}
}
function companion_main() {
	console.info("Bridge Connected, Loading SAMMI Companion [Extension]");
	localStorage.setItem('companion_autoconnect', "true")
	const companionConnectButton = document.getElementById('companion-websocket-connect')
	const companionConnectStatus = document.getElementById('companion-websocket-status')

	if(!companionConnectButton || !companionConnectStatus){
		SAMMI.alert("SAMMI Companion [Extension] Error")
		return
	}

	let ws = companion_reconnect()

	companionConnectButton.addEventListener("pointerdown", ()=>{
		if(ws && (ws.readyState == ws.OPEN)){
			localStorage.setItem('companion_autoconnect', "false")
			ws.close()
		}
		else {
			localStorage.setItem('companion_autoconnect', "true")
			ws = companion_reconnect()
			return;
		}
	})

	setInterval(()=>{
		if(ws && (ws.readyState == ws.OPEN)) return;
		if(localStorage.getItem('companion_autoconnect') == "true"){
			companionConnectStatus.innerText = "Retrying..."
			ws = companion_reconnect()
		}
	}, 30 * 1000)

	sammiclient.on('Companion: TTS Request', (payload) => {
		const { FromButton }  = payload.Data 
		
		const text = payload.Data.text
		const packet = {
			version: 1,
			type: 'tts_request',
			body: text
		}

		if(!ws || (ws.readyState != ws.OPEN)){
			SAMMI.alert("Companion Not Connected, TTS Request Lost")
			return;
		}
		ws.send(JSON.stringify(packet))
	});
	sammiclient.on('Companion: TTS Request (Consistent)', (payload) => {
		const { FromButton }  = payload.Data 
		
		const text = payload.Data.text
		const key = payload.Data.key
		const hashedKey = window.crypto.subtle.digest("SHA-256", new TextEncoder().encode(text));
		const packet = {
			version: 1,
			type: 'tts_request_wkey',
			body: {
				text,
				key
			}
		}

		if(!ws || (ws.readyState != ws.OPEN)){
			SAMMI.alert("Companion Not Connected, TTS Request Lost")
			return;
		}
		ws.send(JSON.stringify(packet))
	});
	sammiclient.on('Companion: TTS Skip', (payload) => {
		const packet = {
			version: 1,
			type: 'tts_skip',
		}

		if(!ws || (ws.readyState != ws.OPEN)){
			SAMMI.alert("Companion Not Connected, TTS Request Lost")
			return;
		}
		ws.send(JSON.stringify(packet))
	});
	sammiclient.on('Companion: TTS Queue Continue', (payload) => {
		const packet = {
			version: 1,
			type: 'tts_queuecontinue',
		}

		if(!ws || (ws.readyState != ws.OPEN)){
			SAMMI.alert("Companion Not Connected, TTS Request Lost")
			return;
		}
		ws.send(JSON.stringify(packet))
	});
	sammiclient.on('Companion: TTS Queue Pause', (payload) => {
		const packet = {
			version: 1,
			type: 'tts_queuestop',
		}

		if(!ws || (ws.readyState != ws.OPEN)){
			SAMMI.alert("Companion Not Connected, TTS Request Lost")
			return;
		}
		ws.send(JSON.stringify(packet))
	});
	sammiclient.on('Companion: TTS Rate', (payload) => {
		const { FromButton }  = payload.Data 
		
		const text = payload.Data.text
		const packet = {
			version: 1,
			type: 'tts_rate',
			body: text
		}

		if(!ws || (ws.readyState != ws.OPEN)){
			SAMMI.alert("Companion Not Connected, TTS Request Lost")
			return;
		}
		ws.send(JSON.stringify(packet))
	});
	sammiclient.on('Companion: TTS Volume', (payload) => {
		const { FromButton }  = payload.Data 
		
		const text = payload.Data.text
		const packet = {
			version: 1,
			type: 'tts_volume',
			body: text
		}

		if(!ws || (ws.readyState != ws.OPEN)){
			SAMMI.alert("Companion Not Connected, TTS Request Lost")
			return;
		}
		ws.send(JSON.stringify(packet))
	});

	SAMMI.alert("SAMMI Companion Ready")
}
[insert_over]
{{ deckdata }}
